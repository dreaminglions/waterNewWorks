<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.BizWaterWorkMapper">
    
    <resultMap type="BizWaterWork" id="BizWaterWorkResult">
        <result property="worksId"    column="works_id"    />
        <result property="worksNo"    column="works_no"    />
        <result property="parentId"    column="parent_id"    />
        <result property="ancestors"    column="ancestors"    />
        <result property="worksName"    column="works_name"    />
        <result property="orderNum"    column="order_num"    />
        <result property="worksProvince"    column="works_province"    />
        <result property="worksCity"    column="works_city"    />
        <result property="worksArea"    column="works_area"    />
        <result property="worksLongitude"    column="works_longitude"    />
        <result property="worksLatitude"    column="works_latitude"    />
        <result property="worksAddress"    column="works_address"    />
        <result property="worksCount"    column="works_count"    />
        <result property="worksType"    column="works_type"    />
        <result property="worksBelong"    column="works_belong"    />
        <result property="worksStatus"    column="works_status"    />
        <result property="worksCenter"    column="works_center"    />
        <result property="parentName" column="parent_name" />
        <result property="worksMaintainer"    column="works_maintainer"    />
        <result property="worksTel"    column="works_tel"    />
        <result property="createTime"    column="create_time"    />
        <result property="createBy"    column="create_by"    />
        <result property="updateTime"    column="update_time"    />
        <result property="updateBy"    column="update_by"    />
    </resultMap>


	
	<sql id="selectBizWaterWorkVo">
        select d.works_id, d.works_no, d.parent_id, d.ancestors, d.works_name, d.order_num, d.works_province, d.works_city, d.works_area, d.works_longitude, d.works_latitude, d.works_address, d.works_count, d.works_type, d.works_belong, d.works_status, d.works_center, d.works_maintainer, d.works_tel, d.create_time, d.create_by, d.update_time, d.update_by
        from biz_water_work d
    </sql>
	
    <select id="selectBizWaterWorkList" parameterType="BizWaterWork" resultMap="BizWaterWorkResult">
        <include refid="selectBizWaterWorkVo"/>
        where del_flag=0
        <if test="parentId != null and parentId != 0">
            AND parent_id = #{parentId}
        </if>
        <if test="worksName != null and worksName != ''">
            AND works_name like  '%'+#{worksName}+ '%'
        </if>
        <if test="worksStatus != null and worksStatus != ''">
            AND works_status = #{worksStatus}
        </if>
        <if test="worksType != null and worksType != ''">
            AND works_type = #{worksType}
        </if>
        <if test="worksProvince != null and worksProvince != ''">
            AND works_province = #{worksProvince}
        </if>
        <!-- 数据范围过滤 -->
        ${params.dataScope}
        order by d.order_num
    </select>


    <select id="selectOnlyWorkList" parameterType="BizWaterWork" resultMap="BizWaterWorkResult">
        <include refid="selectBizWaterWorkVo"/>
        where del_flag=0
        <if test="parentId != null and parentId != 0">
            AND parent_id = #{parentId}
        </if>
        <if test="worksName != null and worksName != ''">
            AND works_name like  '%'+#{worksName}+ '%'
        </if>
        <if test="worksStatus != null and worksStatus != ''">
            AND works_status = #{worksStatus}
        </if>
        AND (works_type ='3'  or works_type ='4')
        <!-- 数据范围过滤 -->
        ${params.dataScope}
        order by d.works_name
    </select>
    
    <select id="selectBizWaterWorkById" parameterType="Long" resultMap="BizWaterWorkResult">
		select d.works_id, d.works_no, d.parent_id, d.ancestors, d.works_name, d.order_num, d.works_province, d.works_city, d.works_area, d.works_longitude, d.works_latitude, d.works_address, d.works_count, d.works_type, d.works_belong, d.works_status, d.works_center, d.works_maintainer, d.works_tel, d.create_time, d.create_by, d.update_time, d.update_by,
			(select works_name from biz_water_work where works_id = d.parent_id) parent_name
		from biz_water_work d
		where d.works_id = #{worksId}  and del_flag=0
    </select>

    <select id="selectBizWaterWorkByNo" parameterType="String" resultMap="BizWaterWorkResult">
        select d.works_id, d.works_no, d.parent_id, d.ancestors, d.works_name, d.order_num, d.works_province, d.works_city, d.works_area, d.works_longitude, d.works_latitude, d.works_address, d.works_count, d.works_type, d.works_belong, d.works_status, d.works_center, d.works_maintainer, d.works_tel, d.create_time, d.create_by, d.update_time, d.update_by,
        (select works_name from biz_water_work where works_id = d.parent_id) parent_name
        from biz_water_work d
        where d.works_no = #{worksNo} and del_flag=0
    </select>

    <select id="selectAreaWaterTree" parameterType="Long" resultMap="BizWaterWorkResult">
        select d.works_id, d.parent_id, d.works_name,d.works_status,d.works_type
        from biz_water_work d
        where d.parent_id=0
        or d.works_id=(select parent_id from biz_water_work where works_id=#{worksId})
        or d.parent_id=(select parent_id from biz_water_work where works_id=#{worksId})
        and d.works_id != #{worksId} and del_flag=0
    </select>
        
    <insert id="insertBizWaterWork" parameterType="BizWaterWork" useGeneratedKeys="true" keyProperty="worksId">
        insert into biz_water_work
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="worksNo != null  and worksNo != ''  ">works_no,</if>
			<if test="parentId != null  ">parent_id,</if>
			<if test="ancestors != null  and ancestors != ''  ">ancestors,</if>
			<if test="worksName != null  and worksName != ''  ">works_name,</if>
			<if test="orderNum != null  ">order_num,</if>
			<if test="worksProvince != null  and worksProvince != ''  ">works_province,</if>
			<if test="worksCity != null  and worksCity != ''  ">works_city,</if>
			<if test="worksArea != null  and worksArea != ''  ">works_area,</if>
            <if test="worksLongitude != null  and worksLongitude != ''  ">works_longitude,</if>
            <if test="worksLatitude != null  and worksLatitude != ''  ">works_latitude,</if>
			<if test="worksAddress != null  and worksAddress != ''  ">works_address,</if>
			<if test="worksCount != null  ">works_count,</if>
			<if test="worksType != null  and worksType != ''  ">works_type,</if>
			<if test="worksBelong != null  ">works_belong,</if>
			<if test="worksStatus != null  and worksStatus != ''  ">works_status,</if>
            <if test="worksCenter != null  and worksCenter != ''  ">works_center,</if>
			<if test="worksMaintainer != null  and worksMaintainer != ''  ">works_maintainer,</if>
			<if test="worksTel != null  and worksTel != ''  ">works_tel,</if>
			<if test="createBy != null  and createBy != ''  ">create_by,</if>
            create_time
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="worksNo != null  and worksNo != ''  ">#{worksNo},</if>
			<if test="parentId != null  ">#{parentId},</if>
			<if test="ancestors != null  and ancestors != ''  ">#{ancestors},</if>
			<if test="worksName != null  and worksName != ''  ">#{worksName},</if>
			<if test="orderNum != null  ">#{orderNum},</if>
			<if test="worksProvince != null  and worksProvince != ''  ">#{worksProvince},</if>
			<if test="worksCity != null  and worksCity != ''  ">#{worksCity},</if>
			<if test="worksArea != null  and worksArea != ''  ">#{worksArea},</if>
            <if test="worksLongitude != null  and worksLongitude != ''  ">#{worksLongitude},</if>
            <if test="worksLatitude != null  and worksLatitude != ''  ">#{worksLatitude},</if>
			<if test="worksAddress != null  and worksAddress != ''  ">#{worksAddress},</if>
			<if test="worksCount != null  ">#{worksCount},</if>
			<if test="worksType != null  and worksType != ''  ">#{worksType},</if>
			<if test="worksBelong != null  ">#{worksBelong},</if>
			<if test="worksStatus != null  and worksStatus != ''  ">#{worksStatus},</if>
            <if test="worksCenter != null  and worksCenter != ''  ">#{worksCenter},</if>
			<if test="worksMaintainer != null  and worksMaintainer != ''  ">#{worksMaintainer},</if>
			<if test="worksTel != null  and worksTel != ''  ">#{worksTel},</if>
			<if test="createBy != null  and createBy != ''  ">#{createBy},</if>
            getdate()
         </trim>
    </insert>
	 
    <update id="updateBizWaterWork" parameterType="BizWaterWork">
        update biz_water_work
        <trim prefix="SET" suffixOverrides=",">
            <if test="worksNo != null  and worksNo != ''  ">works_no = #{worksNo},</if>
            <if test="parentId != null  ">parent_id = #{parentId},</if>
            <if test="ancestors != null  and ancestors != ''  ">ancestors = #{ancestors},</if>
            <if test="worksName != null  and worksName != ''  ">works_name = #{worksName},</if>
            <if test="orderNum != null  ">order_num = #{orderNum},</if>
            <if test="worksProvince != null  and worksProvince != ''  ">works_province = #{worksProvince},</if>
            <if test="worksCity != null  and worksCity != ''  ">works_city = #{worksCity},</if>
            <if test="worksArea != null  and worksArea != ''  ">works_area = #{worksArea},</if>
            <if test="worksLongitude != null  and worksLongitude != ''  ">works_longitude = #{worksLongitude},</if>
            <if test="worksLatitude != null  and worksLatitude != ''  ">works_latitude = #{worksLatitude},</if>
            <if test="worksAddress != null  and worksAddress != ''  ">works_address = #{worksAddress},</if>
            <if test="worksCount != null  ">works_count = #{worksCount},</if>
            <if test="worksType != null  and worksType != ''  ">works_type = #{worksType},</if>
            <if test="worksBelong != null  ">works_belong = #{worksBelong},</if>
            <if test="worksStatus != null  and worksStatus != ''  ">works_status = #{worksStatus},</if>
            <if test="worksCenter != null  and worksCenter != ''  ">works_center = #{worksCenter},</if>
            <if test="worksMaintainer != null  and worksMaintainer != ''  ">works_maintainer = #{worksMaintainer},</if>
            <if test="worksTel != null  and worksTel != ''  ">works_tel = #{worksTel},</if>
            <if test="updateBy != null  and updateBy != ''  ">update_by = #{updateBy},</if>
            update_time = getdate()
        </trim>
        where works_id = #{worksId}
    </update>

    <update id="updateDelFlag" parameterType="BizWaterWork">
        update biz_water_work set del_flag = 1
        where works_id = #{worksId}
    </update>

	<delete id="deleteBizWaterWorkById" parameterType="Long">
        delete from biz_water_work where works_id = #{worksId}
    </delete>
	
    <delete id="deleteBizWaterWorkByIds" parameterType="String">
        delete from biz_water_work where works_id in 
        <foreach item="worksId" collection="array" open="(" separator="," close=")">
            #{worksId}
        </foreach>
    </delete>

    <select id="selectRoleWorkTree" parameterType="Long" resultType="String">
        select (convert(varchar(10), d.works_id)+ d.works_name) as works_name
        from biz_water_work d
        left join sys_role_work rd on d.works_id = rd.works_id
        where d.works_status = '0'  and del_flag=0 and rd.role_id = #{roleId}
        order by d.parent_id, d.order_num
    </select>

    <select id="selectRoleWork" parameterType="Long" resultMap="BizWaterWorkResult">
        <include refid="selectBizWaterWorkVo"/>
        left join sys_role_work rd on d.works_id = rd.works_id
        where d.works_status = '0'   and del_flag=0  and rd.role_id = #{roleId}
        order by d.parent_id, d.order_num
    </select>

    <select id="selectWorksCode" resultType="WeatherEnity">
        SELECT DISTINCT  works_province as 'provinceCode', works_city as 'cityCode', works_area as 'areaCode'
         from biz_water_work  where del_flag=0
    </select>

    <select id="selectChildWork" parameterType="Long" resultType="Integer">
         select count(1) counts
        from biz_water_work d
        where d.del_flag=0 and d.parent_id=#{worksId}
    </select>


    <select id="selectProvWork" resultType="DataEnity">
        SELECT
        r.region_name as 'key',count(1) as 'value'
        FROM biz_water_work w
        LEFT JOIN sys_region r  on w.works_province = r.region_cod
        where w.del_flag='0' and (works_type='3' or works_type='4')
        GROUP BY r.region_name
    </select>
    
</mapper>